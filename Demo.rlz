colored_cell = (4, 2); (97, 34, 55)
# Общая информация
game_name = Демонстрационный файл проекта  # Название игры

# Игровое поле
Секция с описанием настроек игрового поля должна размещаться в самом начале файла
CELLS_WIDTH = 11  # ширина игрового поля в клетках
CELLS_HEIGHT = 9  # высота игрового поля в клетках
SIZE_OF_CELL = 75  # размер одной клетки в пикселях
GB_COLOR_RED = 128  # Цвет игрового поля (RGB)
GB_COLOR_GREEN = 128  # Цвет игрового поля (RGB)
GB_COLOR_BLUE = 200  # Цвет игрового поля (RGB)
GB_SECOND_COLOR = (70, , ); true  # Необязательная строка для указания второго цвета игрового поля
# первые три цифры - цвет, далее через точку с запятой нужно указать слово True или False: если указано True, то
# верхняя левая клетка будет покрашена, если False - то нет
# значение False установлено по умолчанию, так что его можно не указывать

# задание цвета для конкретных клеток
# Для корректной работы,
# Эта секция должна быть расположена после описания настроек игрового поля
colored_cell = (4, 5); (128, 128, 128)  # первые две цифры - координаты клетки на доске, следующие три - её цвет (RGB)
colored_cell =  5 7 34 2 29
colored-cell = (1, 3); (200, 100, 150)
colored_cell = (k 3; (230. 456
colored_cell 23 7. 250 100 100
colored_cell = 7,1;  225,125,175
colored_cell = 6:5)  425, 7, -230)))
colored_cell = 6;:6  425, 7, 230

# загрузка изображений в качестве клеток
# Для корректной работы,
# Эта секция должна быть расположена после описания настроек игрового поля
# первые две цифры - координаты клетки на доске, следующая строка - путь к файлу
# координаты клетки и путь к файлу должны быть разделены точкой с запятой
loaded_cell = (5, 5); (/Users/basil/Desktop/cell.svg)
loaded_cell = (8, 5); (/Users/basil/Downloads/filename.svg)
loaded_cell = 6,6; /Users/basil/Downloads/cell.svg)

image_load = 8; /Users/basil/Desktop/Лого и визитка/Logo.svg

# Фигуры

# figure_type = тип фигуры
# ft_player = индекс игрока, которому принадлежит фигура
#  ft_name = назание фигуры (нужно для игроков)
# ft_img_type = тип рисунка фигуры (см. ниже)
# 1 - чёрный квадрат
# 2 - чёрный круг
# 3 - белый квадрат
# 4 - белый круг
# 5 - красный квадрат
# 6 - красный круг
# 7 - зелёный квадрат
# 8 - зелёный круг

# максимум - 32 разных фигуры
figure_type = 1  # открыли описание новой фигуры
ft_player = 1
ft_name = black_pawn
ft_img_type = 1

figure_type = 2  # открыли описание новой фигуры
ft_player = 1
ft_name = black_king
ft_img_type = 2

figure_type = 3  # открыли описание новой фигуры
ft_player = 2
ft_name = white_pawn
ft_img_type = 5

figure_type = 4  # открыли описание новой фигуры
ft_player = 3
ft_name = red_king
ft_img_type = 8


# Конец секции описания figure_types
# Все figure_types должны быть описаны ДО заполнения доски (game_brd_add) и возможных ходов (turns)

# расстановка фигур
# набор - описание параметров фигуры
# разделитель внутри набора - запятая, между наборами - точка с запятой
# (номер ячейки по х (начиная с 1), номер ячейки по у (начиная с 1), индекс figure_type)
game_brd_add = (1, 5, 1); (1, 6, 1);  (1, 4, 1)
game_brd_add = (5, 7, 2) ;(6, 7, 2)
game_brd_add = (6, 8, 3) ;(7, 8, 3); (8, 8, 3)
game_brd_add = (7, 7, 4)

# особые клетки (для изменения фигуры)
# два набора из трёх элементов каждый - описание параметров клетки
# набор source - набор destination
# если фигура с типом из первого набора оказывается на клетке source, то на клетке destination появляется фигура с типом из второго набора
# разделитель внутри набора - запятая, между наборами - точка с запятой
# начало координат в левом верхнем углу
# (номер старой ячейки по х, номер старой ячейки по у, тип старой фигуры); (номер новой ячейки по х, номер новой ячейки по у, тип новой фигуры)

gm_brd_sp_add = (11, 8, 3); (1, 8, 3)  # телепортация
gm_brd_sp_add = (1, 1, 1); (1, 1, 2)  # превращение из одной фигуры в другую
gm_brd_sp_add = (2, 5, 2); (3, 3, 1)

#turns:
# turn_add добавляет новое правило возможного хода
# tn_figures = фигуры, которые могут совершать этот ход; 0 - все, пустота - никакие
# tn_directs = направления, в которых может быть совершён ход;
# 1 - пр верх, 2 - право, 3 - пр низ, 4 - низ, 5 - л низ, 6 - лево, 7 - л верх, 8 - верх, 0 - без ограничений
# tn_len = перечисление возможной длины ходов, 0 - без ограничений
# tn_jump = перечисление типов фигур, которые можно перепрыгивать; 0 - любые, пустота - никакие
# tn_replace = перечисление типов фигур, которые можно замещать (т. е. вставать на их место); 0 - любые, пустота - никакие
# tn_action = набор с разделителями в виде точек с запятыми;
# первая группа - направление (0 - любое), на которое будет накладываться каждый шаблон поиска из списка ниже
#  и применяться целевой шаблон (последняя группа)
# начиная со второй и до предпоследней (включительно) - каждая описывает возможные комбинации допустимых при проверке типов фигур
#  на одной клетке (0 - любое, пустота - пустая клетка); кол-во таких групп - кол-во клеток.
#  В фильтре не учитывается сама походившая фигура, и описывать её не нужно
# последняя группа - целевой шаблон; при совпадении позиции на доске с шаблоном поиска часть игрового поля меняется в соответствии с целевым шаблоном
#  пустота - ничего не меняется
#  0 - удаление
# Если шаблон невозможно применить, то он не применяется, но ход при этом всё равно происходит

turn_add
tn_figures = (1, 2)
tn_directs = (2, 4, 6, 8)
tn_len = (0)
tn_jump = (2)
tn_replace = (2, 3)
tn_action = (2, 4, 6, 8); (2, 3, 4); (1); (0, )

turn_add
tn_figures = (1, 2)
tn_directs = (2, 4, 6, 8)
tn_len = (0)
tn_jump = ()
tn_replace = ()
tn_action = (2, 4, 6, 8); (2, 3, 4); (1); (0, )

turn_add
tn_figures = (3, 4)
tn_directs = (2, 4, 6, 8)
tn_len = (0)
tn_jump = (1)
tn_replace = (1)
tn_action = (1, 7); (); (1); (1, 0)  # test diagonal magnetto
tn_action = (2, 4, 6, 8); (1); (2, 3); (0, )

turn_add
tn_figures = (3, 4)
tn_directs = (2, 4, 6, 8)
tn_len = (1, 2, 3)
tn_jump = ()
tn_replace = ()
tn_action = ()

turn_add
tn_figures = (4)
tn_directs = (1, 3)
tn_len = (1, 2)
tn_jump = ()
tn_replace = ()
tn_action = ()

turn_add
tn_figures = (3, 4)
tn_directs = (9)
tn_coors = (2, 1)
tn_jump = ()
tn_replace = ()
tn_action = ()


# далее - секция описания условий завершения игры
# должна быть расположена ниже секции описания фигур
#game_winner открывает секцию описания побед данного игрока

game_winner = 2

# условия позиционной победы
# набор - описание одного условия
# строка - несколько наборов, объединённых логическим И
# строки объединёны между собой логическим ИЛИ
# разделитель внутри набора - запятая, между наборами - точка с запятой
# (номер ячейки по х (начиная с 1), номер ячейки по у (начиная с 1), индекс figure_type)

# условия количественной победы
# набор - описание одного набора условий
# для окончания игры необхожимо выполнение всех условий в строке
# для окончания игры достаточно выполнения условий только одной строки
# разделитель внутри набора - запятая, между наборами - точка с запятой
# (индекс figure_type, кол-во фигур данного типа)

win_cond_num = (1, 0)
win_cond_pos = (11, 1, 3); (10, 7, 4)


game_winner = 1

win_cond_pos = (1, 1, 2); (1, 11, 2)
win_cond_num = (3, 2); (4, 0)
